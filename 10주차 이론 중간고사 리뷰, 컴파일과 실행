#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {
	

	return 0;
}

// Leaky ReLU 인공지능에서 쓰이는 활성함수 
// 패딩 : 데이터 주변이나 안쪽에 값이 들어있는 거. 알고리즘은 그대로 두고 데이터값을 조정하는 방법.
// (padding) 0으로 채워져 있다던가. 등으로 사용.
// 
// 문제의 방향성과 해결조건이 추가될 수록 난이도가 천차만별이 됨.
// 변수를 제한하거나, 문제의 처리를 반대로 하게끔 하는 식.
// 
// 기말고사는 중간고사의 확장판
// 배열의 종류와 차원이 커지고 포인터가 좀 더 복잡해짐.
// 스스로 문제를 만들며 공부하는 것이 훌륭한 공부.	
// 
// 무슨 포인터든 가르키는 것은 한 바이트이다.
// 실행 이전에 컴파일러에서 메모리를, 위치를 계산해줌.
// Q. 실행과 컴파일의 차이가 궁금합니다.
// A. c파일에서 컴파일을 하면 obj파일이 됨. 여기서 실행시키면 exe파일로 전환
//	컴파일하는 걸 링커라고 함. obj에서는 100 + x 같은 식으로 상대 주소가 동일하게 만들어줌.
//	여기서 실행시키면 x 값이 들어가며 메모리 절대(page)위치가 정해짐.
// 페이지와 프레임은 비슷하면서도 다름. 실제 절대 주소는 프레임. 우리에게 주어지는 것이 페이지.
// 우리가 절대주소라고 말하는 것은 일종의 페이지임. 하드웨어적으로 보호하기위해 운영체제가 프레임을 숨기고 있음.
// 일종의 보안이라고 생각. 프레임을 페이지로 바꿔서 우리에게 보여줌.
// 링커는 컴파일해서 obj로 바꾸면서 추가된 주소들이 다르도록 해줌. 메모리 충돌을 피하기 위함.
// 실행을 시키면 x에 시작주소를 주어 메모리 절대 주소를 주게 된다고 생각해도 됨.
// 
// 링커 페이지 프레임
//
