#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main() {

	return 0;
}

// 
// char c1;	// 변수 공간 생성. 메모리에 영역 할당 OS가 존재하면 그 영역을 지켜줌.
// char c2 = 'a';	// 생성 후 'a'로 초기값을 줌.
// char c3 = "abcd";	// 컴파일러에 따라 들어갈 수도 아닌수도 있음. 틀렸지만 들어갈 수도 있음. 내 컴 기준 안됨. c파일 기준 에러는 뜨지만 실행됨
// ""가 안에 있는 것의 주소를 넘겨줌. abcd이 텍스트 영역 어딘가에 만들어지고 그 주소를 주는 것.
// char c4 = "a";	// 내 컴 기준 안됨. 워닝 말고 에러가 뜸. c파일 기준 에러는 뜨지만 실행됨
// "" 을 넣으면 NULL이 들어감. ''을 넣으면 에러 어떤 것도 없음. 뭘 넣어야할지 모름.
// 
// char c1 = 1, c2 = 'a';
// char c3 = "a", *c4 = "abcd";
// char *c5 = "ABCD", c6 =  1;
// 
// c1 = "a";	// 에러
// c4[4] =  1;	// "abcd"가 텍스트 영역이라 쓸 수 없음. 컴파일러에는 다 되는데 안됨.
// c5[1] = 'X';	// 텍스트 영역이라 할 수 없음.
// 
// char ca1[5];
// char ca2[5] = { 'a', 'b', 'c', 'd', 'e' };	// 가능. 문자열 처리만 불가능
// char ca3[5] = { 'a', 'b', 'c', 'd', 'e', 'f' };	// 컴파일러 마음대로. 워닝 혹은 에러. 내 컴 기준 에러 c파일 기준 에러는 뜨지만 실행됨
// char ca4[] = { 'a', 'b', 'c', 'd', 'e' };	// 5가 들어감. 오른쪽의 개수를 읽고 들어감.
// char ca5[5] = "abcd";	// 주소를 넘기는데 선언 시에 들어가면 복사를 해줌. 복사본이라 이후에 값을 건드릴 수 있음.
// char ca6[] = "abcd";	// 5로 넣어줌.
// char ca7[];	// 알 수 없는 크기. 에러
// char ca8[5] = "abcdef";	// 에러나 워닝. 내 컴 기준 에러
// 
// char *cp1;	// 데이터 영역에 4바이트(주소가 들어가는 하나) 영역을 만듬. 컴퓨터는 2번의 주소 계산을 함. 컴파일러, 메모리
// char *cp2 = "abcde";	// 연결시켜줌.
// char *cp3 = { 'a', 'b', 'c', 'd', 'e' };	// 양변이 다름. 에러
// char *cp4 = "";	// NULL
// char *cp5 = '';	// 에러
// char *cp6 = 'a';
// char *cp7 = 100; 
// 
// 함수에 인자가 많을수록 느리고 안좋은 함수.
// 
// strlen 함수를 만드는 것
// 
// while(1) {
//	if (*str++ != NULL)
//		length++;
//	else break;
// }
// return length;
// 
// while(*str++ != NULL) length++;
// return length;
// 
// char *p = str;
// while(*str != NULL) str++;
// return str - p;
// 
// strstr strcat strlen strcpy 만들어보기!
