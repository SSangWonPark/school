#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#if 1
int main() {
	int arr[2][4] = { 1,2,3,4 };

	printf("%d", arr[1][2]);	

	return 0;
}
#endif
// 다차원 배열
// int arr[10][10] 뒤에꺼부터 생각해서 int 형이 10개 있고 그것이 10개있다. button up 방식
// 반대로 생각해서 int arr[10][10] 앞에서 부터 10개의 덩어리가 있고 그 안에 10개의 덩어리씩 있다. top down 방식
// 다음 주소를 생각할 때, 뒤에 있는 것 만큼 뛰어넘어야한다. 컴파일러가 계산해준다.
// 컴파일러가 기계적으로 계산해줄 수 있는 부분임.
// 
// int arr2[3][4] 의 실제 메모리 배치
// [0][0] [0][1] ... [1][0] [1][1] ...[2][3]
// 연속적으로 존재 빈 공간이 단 하나도 없다. (int, char같은 형태에서 예외는 struct, 어쩔 수 없음)
// for문으로 배열을 돌릴 때, 뒤에부터 돌아가는게 캐쉬에서 효율적. 순서대로 읽기때문
// 
// Q. 컴파일러적으로 [1][n]에서 n개를 가져오는지 덩어리 단위로 가져오는 이유 
// A. 캐쉬를 운영체제가 건드림.
// 
// 행 단위 초기화 시 일부 요소만 초기화, 나머지는 0이 들어감.
// 
// Q. 1행은 전부 빈 상태에서 2행 3행을 채우면 1행은 모두 0인가? 
// A. 쓰레기값이 나옴 그러나 뒤에 ,를 붙이면 초기화해줌.
// 
// 초기화 리스트에 의한 배열의 크기
// int arr[] = {1, 2, 3} 가능
// int arr[][] = {1, 2, 3, 4, 5, 6, 7, 8} 불가능 Error
// int arr[][4] = {1, 2, 3, 4, 5, 6, 7, 8} 가능
// int arr[][2] = {1, 2, 3, 4, 5, 6, 7, 8} 가능
// int arr[4][] = {1, 2, 3, 4, 5, 6, 7, 8} 불가능 Error 
// 
// 사실 VS에 나오는 주소도 가짜 번지임. 물리번지에 직접 들어갈 수 없음.
// int i[3][4] 에서 i는 변수가 아니다. 주소를 나타내는 상수이다. 포인트 상수
// 모든 주소는 할당받은 것이기 때문에 변경할 수 없고 상수이다.
// i 는 첫번째 덩어리의 주소를 나타낸다.(3개의 덩이리 중 첫째)
// i 다음 주소는 &i[0][1]이 아니라 &i[1][0] 이다.
// i[0]은 주소, i[0][1]인 순간 int 데이터이다.
// 

// int diff, i[3][4] = { 100, 200, 300, 400, 500, };
	/*	중요!!
	i = 0	// 시작번지, 첫번째 덩어리(int 4개 묶음)의 시작주소를 의미
	i + 1 = 16	// 첫번째 덩어리 다음의 덩어리의 시작주소, +16을 함.(첫 덩어리의 크기, int형 4개)
	i++은 불가능 i++은 i = i + 1과 동일함. 그런데 i는 변수가 아닌 상수임. 따라서 불가능

	&i = 0	// 첫번째 덩어리(4개짜리)의 바깥쪽이므로 배열전체 시작 주소, 여전히 0
	&i + 1 = 16	// 첫번째 덩어리(4개짜리)의 바깥쪽이므로 배열전체의 다음주소, + 48

	i[0] = 0	// 첫번째 덩어리 내에서 다시 첫번째 덩어리, 즉, [0][0]의 주소
	i[1] = 16	// 두번째 덩어리 내에서 다시 첫번째 덩어리, 즉, [1][0]의 주소
	i[2] = 32	// 세번째 덩어리 내에서 다시 첫번째 덩어리, 즉, [2][0]의 주소

	i[0] + 1 = 4	// 첫번째 덩어리 내에서 다시 첫번째 덩어리, 즉, [0][0]의 그 다음 주소, +4 즉, int이다
	i[1] + 1 = 20	// 두번째 덩어리 내에서 다시 첫번째 덩어리, 즉, [1][0]의 그 다음 주소, +4 즉, int이다
	i[2] + 1 = 36	// 세번째 덩어리 내에서 다시 첫번째 덩어리, 즉, [2][0]의 그 다음 주소, +4 즉, int이다

	&i[0] = 0	// (첫번째 덩어리 내에서 첫번째 덩어리)밖 덩어리 주소, 즉 첫번째 덩어리 주소일때, []한개 쓴 것과 &가 상쇄되는 것임, 즉 int 4개짜리 덩어리 주소임.
	&i[1] = 16	// (두번째 덩어리 내에서 첫번째 덩어리)밖 덩어리 주소, 즉 두번째 덩어리 주소
	&i[2] = 32	// (세번째 덩어리 내에서 첫번째 덩어리)밖 덩어리 주소, 즉 세번째 덩어리 주소

	&i[0] + 1 = 16	// 위 설명처럼 (첫번째 덩어리) 다음 (덩어리)주소, 즉, 두번째 덩어리 주소
	&i[1] + 1 = 32	// 위 설명처럼 (두번째 덩어리) 다음 (덩어리)주소, 즉, 세번째 덩어리 주소
	&i[2] + 1 = 48	// 위 설명처럼 (세번째 덩어리) 다음 (덩어리)주소, 즉, 네번째 덩어리 주소
					// 실제 4번째 덩어리는 없다. 그러나 C언어는 상관없이 계산한다. 주의

	&i[0][0] = 0	// i[0][0]은 첫번째 덩어리의 첫번째 int 값을 의미한다. 그것의 주소
					// i[0][0]는 주소가 아니라 데이터임을 주의
	&i[1][0] = 16	// i[1][0]은 두번째 덩어리의 첫번째 int 값을 의미한다. 그것의 주소

	&i[0][0] + 1 = 4	// 각 int 값 주소를 가리키고 그것의 다음을 의미하므로, 0 + 4가 된다.
	&i[1][0] + 1 = 20	// 각 int 값 주소를 가리키고 그것의 다음을 의미하므로, 16 + 4가 된다.

	100	// i[0][0]을 출력한 것이다. [0][0]의 값이므로 100이 된다.
	*/

// int i[][]의 정의에서 [][]형태인 것만 int 값이고, 나머지는 주소라고 생각하면 된다.
// 즉, i, i[0] 등은 모두 주소이다. 이걸 이해해야 위처럼 +1의 값을 계산할 수 있다.
// 위 i에서 printf("%p", i + 1); 은 맞지만 printf("%p", i++);은 틀린다.
// 위 i에서 printf("%p", &i + 1); 은 맞지만 printf("%p", &i++);은 틀린다.
//
// 3차원도 2차원 생각하듯이 top down으로 큰 덩어리부터 생각하자.
// 배열은 실제로 연속적이지 않을 수도 있다. 그러나 컴퓨터가 연속적으로 처리하기 때문에 연속적이라 생각해도 된다.

// Q. strlen()같은 함수를 여러번 써야 한다면 변수에 넣는게 더 좋은지 상관없는지.
// A. 고정값이면 변수로
// Q. 메모리 양이 극히 작은 임베디드 시스템에서는 주소를 특정해서 하는 경우가 있는지. 물리번지에 접근 가능한지.
// A. OS가 없을 때 접근 가능하다.
